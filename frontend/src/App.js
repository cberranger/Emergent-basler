import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport axios from 'axios';\nimport \"@/App.css\";\n\n// Import UI components\nimport { Button } from './components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './components/ui/card';\nimport { Badge } from './components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';\nimport { Input } from './components/ui/input';\nimport { Label } from './components/ui/label';\nimport { Switch } from './components/ui/switch';\nimport { Separator } from './components/ui/separator';\nimport { AlertCircle, Camera, Play, Square, Settings, Save, RefreshCw } from 'lucide-react';\nimport { toast, Toaster } from 'sonner';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\n// Camera Stream Component\nconst CameraStream = ({ camera, onConfigChange }) => {\n  const [frame, setFrame] = useState(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const [config, setConfig] = useState({\n    exposure_time: 1000,\n    gain: 1.0,\n    frame_rate: 10\n  });\n\n  // Poll for frames when streaming\n  useEffect(() => {\n    let interval;\n    if (isStreaming) {\n      interval = setInterval(async () => {\n        try {\n          const response = await axios.get(`${API}/cameras/${camera.id}/frame`);\n          setFrame(response.data);\n        } catch (error) {\n          // Silently handle frame fetch errors\n        }\n      }, 100); // 10 FPS polling\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isStreaming, camera.id]);\n\n  const handleConnect = async () => {\n    try {\n      await axios.post(`${API}/cameras/${camera.id}/connect`);\n      toast.success(`Connected to ${camera.name}`);\n      onConfigChange();\n    } catch (error) {\n      toast.error(`Failed to connect: ${error.response?.data?.detail || error.message}`);\n    }\n  };\n\n  const handleDisconnect = async () => {\n    try {\n      setIsStreaming(false);\n      await axios.post(`${API}/cameras/${camera.id}/disconnect`);\n      toast.success(`Disconnected ${camera.name}`);\n      onConfigChange();\n    } catch (error) {\n      toast.error(`Failed to disconnect: ${error.response?.data?.detail || error.message}`);\n    }\n  };\n\n  const handleStartStreaming = async () => {\n    try {\n      await axios.post(`${API}/cameras/${camera.id}/start-streaming`);\n      setIsStreaming(true);\n      toast.success(`Started streaming ${camera.name}`);\n      onConfigChange();\n    } catch (error) {\n      toast.error(`Failed to start streaming: ${error.response?.data?.detail || error.message}`);\n    }\n  };\n\n  const handleStopStreaming = async () => {\n    try {\n      await axios.post(`${API}/cameras/${camera.id}/stop-streaming`);\n      setIsStreaming(false);\n      setFrame(null);\n      toast.success(`Stopped streaming ${camera.name}`);\n      onConfigChange();\n    } catch (error) {\n      toast.error(`Failed to stop streaming: ${error.response?.data?.detail || error.message}`);\n    }\n  };\n\n  const handleConfigure = async () => {\n    try {\n      await axios.post(`${API}/cameras/${camera.id}/configure`, {\n        camera_id: camera.id,\n        ...config\n      });\n      toast.success(`Configured ${camera.name}`);\n    } catch (error) {\n      toast.error(`Failed to configure: ${error.response?.data?.detail || error.message}`);\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'connected': return 'bg-yellow-500';\n      case 'streaming': return 'bg-green-500';\n      case 'disconnected': return 'bg-gray-500';\n      default: return 'bg-red-500';\n    }\n  };\n\n  return (\n    <Card className=\"w-full\" data-testid={`camera-card-${camera.id}`}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Camera className=\"h-5 w-5\" />\n              {camera.name}\n            </CardTitle>\n            <CardDescription>\n              {camera.model} • {camera.serial} • {camera.type}\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className={`${getStatusColor(camera.status)} text-white`}>\n              {camera.status}\n            </Badge>\n            {camera.type === 'tof' && (\n              <Badge variant=\"secondary\">ToF</Badge>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Stream Display */}\n        <div className=\"aspect-video bg-gray-100 rounded-lg flex items-center justify-center overflow-hidden\">\n          {frame ? (\n            <div className=\"relative w-full h-full\">\n              <img \n                src={`data:image/jpeg;base64,${frame.frame_data}`}\n                alt={`Stream from ${camera.name}`}\n                className=\"w-full h-full object-contain\"\n              />\n              <div className=\"absolute top-2 right-2 bg-black bg-opacity-75 text-white px-2 py-1 rounded text-xs\">\n                Frame: {frame.frame_number} | {new Date(frame.timestamp * 1000).toLocaleTimeString()}\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center text-gray-500\">\n              <Camera className=\"h-12 w-12 mx-auto mb-2 opacity-30\" />\n              <p>No stream available</p>\n            </div>\n          )}\n        </div>\n\n        {/* Controls */}\n        <div className=\"flex gap-2 flex-wrap\">\n          {camera.status === 'disconnected' && (\n            <Button onClick={handleConnect} data-testid={`connect-btn-${camera.id}`}>\n              Connect\n            </Button>\n          )}\n          \n          {camera.status === 'connected' && (\n            <>\n              <Button onClick={handleStartStreaming} className=\"bg-green-600 hover:bg-green-700\" data-testid={`start-stream-btn-${camera.id}`}>\n                <Play className=\"h-4 w-4 mr-1\" />\n                Start Stream\n              </Button>\n              <Button onClick={handleDisconnect} variant=\"outline\" data-testid={`disconnect-btn-${camera.id}`}>\n                Disconnect\n              </Button>\n            </>\n          )}\n          \n          {camera.status === 'streaming' && (\n            <>\n              <Button onClick={handleStopStreaming} variant=\"destructive\" data-testid={`stop-stream-btn-${camera.id}`}>\n                <Square className=\"h-4 w-4 mr-1\" />\n                Stop Stream\n              </Button>\n              <Button onClick={handleDisconnect} variant=\"outline\" data-testid={`disconnect-btn-${camera.id}`}>\n                Disconnect\n              </Button>\n            </>\n          )}\n        </div>\n\n        {/* Configuration Panel */}\n        {camera.status !== 'disconnected' && (\n          <div className=\"border rounded-lg p-4 space-y-3\">\n            <h4 className=\"font-medium flex items-center gap-2\">\n              <Settings className=\"h-4 w-4\" />\n              Camera Configuration\n            </h4>\n            <div className=\"grid grid-cols-3 gap-3\">\n              <div>\n                <Label htmlFor={`exposure-${camera.id}`}>Exposure (μs)</Label>\n                <Input\n                  id={`exposure-${camera.id}`}\n                  type=\"number\"\n                  value={config.exposure_time}\n                  onChange={(e) => setConfig({...config, exposure_time: parseFloat(e.target.value)})}\n                  min=\"10\"\n                  max=\"100000\"\n                />\n              </div>\n              <div>\n                <Label htmlFor={`gain-${camera.id}`}>Gain</Label>\n                <Input\n                  id={`gain-${camera.id}`}\n                  type=\"number\"\n                  value={config.gain}\n                  onChange={(e) => setConfig({...config, gain: parseFloat(e.target.value)})}\n                  min=\"0\"\n                  max=\"20\"\n                  step=\"0.1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor={`framerate-${camera.id}`}>Frame Rate (fps)</Label>\n                <Input\n                  id={`framerate-${camera.id}`}\n                  type=\"number\"\n                  value={config.frame_rate}\n                  onChange={(e) => setConfig({...config, frame_rate: parseFloat(e.target.value)})}\n                  min=\"1\"\n                  max=\"100\"\n                />\n              </div>\n            </div>\n            <Button onClick={handleConfigure} size=\"sm\" data-testid={`configure-btn-${camera.id}`}>\n              Apply Configuration\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\n// Save Configuration Component\nconst SaveConfiguration = () => {\n  const [saveConfig, setSaveConfig] = useState({\n    enabled: false,\n    base_directory: 'C:\\\\CameraCaptures',\n    create_timestamp_folder: true,\n    save_format: 'png'\n  });\n\n  const handleSaveConfig = async () => {\n    try {\n      await axios.post(`${API}/save-config`, saveConfig);\n      toast.success('Save configuration updated');\n    } catch (error) {\n      toast.error(`Failed to update save config: ${error.response?.data?.detail || error.message}`);\n    }\n  };\n\n  return (\n    <Card data-testid=\"save-config-card\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Save className=\"h-5 w-5\" />\n          Save Configuration\n        </CardTitle>\n        <CardDescription>\n          Configure automatic frame saving for all cameras\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"save-enabled\"\n            checked={saveConfig.enabled}\n            onCheckedChange={(enabled) => setSaveConfig({...saveConfig, enabled})}\n            data-testid=\"save-enabled-switch\"\n          />\n          <Label htmlFor=\"save-enabled\">Enable automatic saving</Label>\n        </div>\n        \n        {saveConfig.enabled && (\n          <>\n            <div>\n              <Label htmlFor=\"base-directory\">Base Directory</Label>\n              <Input\n                id=\"base-directory\"\n                value={saveConfig.base_directory}\n                onChange={(e) => setSaveConfig({...saveConfig, base_directory: e.target.value})}\n                placeholder=\"C:\\CameraCaptures\"\n                data-testid=\"base-directory-input\"\n              />\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"timestamp-folder\"\n                checked={saveConfig.create_timestamp_folder}\n                onCheckedChange={(create_timestamp_folder) => \n                  setSaveConfig({...saveConfig, create_timestamp_folder})\n                }\n              />\n              <Label htmlFor=\"timestamp-folder\">Create timestamp folders</Label>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"save-format\">Save Format</Label>\n              <select\n                id=\"save-format\"\n                value={saveConfig.save_format}\n                onChange={(e) => setSaveConfig({...saveConfig, save_format: e.target.value})}\n                className=\"w-full p-2 border rounded-md\"\n                data-testid=\"save-format-select\"\n              >\n                <option value=\"png\">PNG</option>\n                <option value=\"jpg\">JPG</option>\n                <option value=\"tiff\">TIFF</option>\n              </select>\n            </div>\n          </>\n        )}\n        \n        <Button onClick={handleSaveConfig} data-testid=\"update-save-config-btn\">\n          Update Save Configuration\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Main App Component\nconst CameraApp = () => {\n  const [cameras, setCameras] = useState([]);\n  const [systemStatus, setSystemStatus] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [refreshing, setRefreshing] = useState(false);\n\n  const fetchCameras = async () => {\n    try {\n      const response = await axios.get(`${API}/cameras`, { timeout: 5000 });\n      setCameras(response.data);\n    } catch (error) {\n      console.error('Failed to fetch cameras:', error);\n      toast.error(`Failed to fetch cameras: ${error.response?.data?.detail || error.message}`);\n      throw error;\n    }\n  };\n\n  const fetchSystemStatus = async () => {\n    try {\n      const response = await axios.get(`${API}/status`, { timeout: 5000 });\n      setSystemStatus(response.data);\n    } catch (error) {\n      console.error('Failed to fetch system status:', error);\n      throw error;\n    }\n  };\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    try {\n      await Promise.all([fetchCameras(), fetchSystemStatus()]);\n      toast.success('Camera list refreshed');\n    } catch (error) {\n      toast.error('Failed to refresh');\n    } finally {\n      setRefreshing(false);\n    }\n  };\n\n  useEffect(() => {\n    const initializeApp = async () => {\n      setLoading(true);\n      try {\n        await Promise.all([fetchCameras(), fetchSystemStatus()]);\n      } catch (error) {\n        console.error('Error initializing app:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeApp();\n\n    // Periodic status update\n    const statusInterval = setInterval(() => {\n      fetchSystemStatus().catch(console.error);\n    }, 10000);\n    return () => clearInterval(statusInterval);\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"h-8 w-8 animate-spin mx-auto mb-4 text-blue-600\" />\n          <p className=\"text-lg font-medium text-gray-700\">Initializing Basler Camera Application...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100\" data-testid=\"camera-app\">\n      <div className=\"container mx-auto p-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-4xl font-bold text-gray-900 mb-2\">Basler Camera Application</h1>\n              <p className=\"text-lg text-gray-600\">Multi-camera streaming and capture system</p>\n            </div>\n            <Button \n              onClick={handleRefresh} \n              disabled={refreshing}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n              data-testid=\"refresh-cameras-btn\"\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />\n              {refreshing ? 'Refreshing...' : 'Refresh Cameras'}\n            </Button>\n          </div>\n          \n          {/* System Status */}\n          {systemStatus && (\n            <Card className=\"bg-white/80 backdrop-blur\" data-testid=\"system-status-card\">\n              <CardContent className=\"p-4\">\n                <div className=\"grid grid-cols-4 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-blue-600\">{systemStatus.total_cameras}</p>\n                    <p className=\"text-sm text-gray-600\">Total Cameras</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-green-600\">{systemStatus.connected_cameras}</p>\n                    <p className=\"text-sm text-gray-600\">Connected</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-purple-600\">{systemStatus.streaming_cameras}</p>\n                    <p className=\"text-sm text-gray-600\">Streaming</p>\n                  </div>\n                  <div>\n                    <div className=\"flex items-center justify-center gap-2\">\n                      <div className={`w-3 h-3 rounded-full ${systemStatus.camera_support ? 'bg-green-500' : 'bg-red-500'}`} />\n                      <p className=\"text-sm text-gray-600\">Camera Support</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"cameras\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"cameras\">Camera Streams</TabsTrigger>\n            <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"cameras\" className=\"space-y-6\">\n            {cameras.length === 0 ? (\n              <Card className=\"text-center py-12\">\n                <CardContent>\n                  <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Cameras Detected</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Make sure your Basler cameras are connected and powered on.\n                  </p>\n                  <p className=\"text-sm text-gray-500 mb-4\">\n                    Backend URL: {BACKEND_URL}\n                  </p>\n                  <Button onClick={handleRefresh} disabled={refreshing} data-testid=\"refresh-no-cameras-btn\">\n                    <RefreshCw className={`h-4 w-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />\n                    Refresh Camera List\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid gap-6\">\n                {cameras.map((camera) => (\n                  <CameraStream \n                    key={camera.id} \n                    camera={camera} \n                    onConfigChange={() => {\n                      fetchCameras().catch(console.error);\n                      fetchSystemStatus().catch(console.error);\n                    }}\n                  />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <SaveConfiguration />\n          </TabsContent>\n        </Tabs>\n      </div>\n      \n      <Toaster position=\"top-right\" />\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<CameraApp />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;"